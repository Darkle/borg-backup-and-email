import path from 'path'
import os from 'os'

import dateFormat from 'dateformat'
import notifier from 'node-notifier'
import mailgunjs from 'mailgun-js'
import onExit from 'signal-exit'
import exec from 'executive'

require('dotenv').config({path: path.join(__dirname, '.env')})
import { create, prune } from './borg.config.json5'

date = dateFormat(new Date(), 'yyyy-mm-dd-HHMMss')
osHostname = os.hostname()
mailgun = mailgunjs({
  domain: process.env.MAILGUN_DOMAIN,
  apiKey: process.env.MAILGUN_PRIVATE_APIKEY
})
mailOptions = {
  from: 'Borg Backup <borg@localhost.dev>',
  to: process.env.DESTINATION_EMAIL,
}
borgCreateParams = [
  ...create.options,
  ...for elem exclude in create.excludes: [ `--exclude "${ exclude }"` ],
  `${ create.repository }::${ create.prefix || osHostname }-${ date }`,
  ...for elem folders in create.foldersToBackup: [ `"${ folders }"` ],
]
borgPruneParams = [
  ...prune.options,
  `--prefix ${ prune.prefix || osHostname }-`,
  `--keep-daily ${ prune.keepDaily }`,
  `--keep-weekly ${ prune.keepWeekly }`,
  `--keep-monthly ${ prune.keepMonthly }`,
  prune.repository
]
logType = create.log?.type

if logType === 'file': borgCreateParams.push(` >> "${ create.log.destination }" 2>&1`)

/*****
* Adding large maxBuffer in case of verbose logging and lotsa files.
* Promises execute straight away, so can't use them here.
*/
exec.quiet(
  [
    `borg create ${ borgCreateParams.join(' ') }`,
    `borg prune ${ borgPruneParams.join(' ') }`,
  ],
  notifyAndEmail
)

/*****
* For some reason the result message always arrives on stderr regardless
* of failure or success. Â¯\_(ãƒ„)_/Â¯
*/
notifyAndEmail(er, stdout, stderr) ->
  messageTitle = generateMessageTitle(checkIfErrorOccured(stderr))
  showDesktopNotification(messageTitle, stderr)
  sendEmail(messageTitle, stderr)

checkIfErrorOccured(result) ->
  result.includes('terminating with error status,')

sendEmail(messageTitle, messageText) ->
  if logType !== 'email': return
  mailgun.messages().send(
    {
      ...mailOptions,
      subject: messageTitle,
      html: `<pre> ${ messageText } </pre>`
    },
    err -> if err: console.error(err)
  )

showDesktopNotification(messageTitle, messageText) ->
  notifier.notify({
    title: messageTitle,
    message: messageText
  })

generateMessageTitle(errorOccured) ->
  if errorOccured: 'Borg Backup Encountered An Error ðŸ’©'
  else: 'Borg Backup Completed Successfully ðŸ˜Ž'

/*****
* Try to break lock on exit always in case of exit on error.
*/
onExit(() -> exec(`borg break-lock ${ create.repository }`, {sync: true}))

process.on('unhandledRejection', bailOnFatalError)
process.on('uncaughtException', bailOnFatalError)

bailOnFatalError(err) ->
  console.error(err)
  process.exit(1)
